version: '2.7'
services:
  keycloak:
    image: quay.io/keycloak/keycloak
    ports:
      - 8080:8080
    mem_limit: 700m
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
    command:
      - start-dev
#    networks:
#      - auth-network
    volumes:
      - C:/2023_Kodlama/dockerVolumes/rentCarKeycloakVolume:/opt/keycloak/data

  postgres:
    image: postgres
    container_name: postgresdb
    restart: always
    ports:
      - 5432:5432
    environment:
      POSTGRES_PASSWORD: test
#    networks:
#      - my-network
    volumes:
      - C:/2023_Kodlama/dockerVolumes/rentCarPostgreVolume:/var/lib/postgresql/data

  mongodb:
    image: mongo
    container_name: mongodb
    hostname: mongodb
    restart: always
    ports:
      - 27017:27017
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: root
#    networks:
#      - my-network
    volumes:
      - C:\2023_Kodlama\dockerVolumes\rentCarMongoVolume:/data/db

  zookeeper:
    image: confluentinc/cp-zookeeper
    ports:
      - 2181:2181
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181

  kafka:
    image: confluentinc/cp-kafka
    ports:
      - 9092:9092
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      #KAFKA_ZOOKEEPER_CONNECT: localhost:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_INTERNAL://broker:29092
      #KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_INTERNAL:PLAINTEXT,LISTENER_EXTERNAL:PLAINTEXT
      #KAFKA_ADVERTISED_LISTENERS: LISTENER_INTERNAL://kafka0:29090,LISTENER_EXTERNAL://localhost:9092
      KAFKA_BROKER_ID: 1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper

  kafka-manager:
    image: hlebalbau/kafka-manager
    ports:
      - 9000:9000
    environment:
      ZK_HOSTS: zookeeper:2181
    depends_on:
      - kafka

  api-gateway:
    build: ./api-gateway
    ports:
      - 8020:8020
    mem_limit: 700m
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - spring.security.oauth2.resourceserver.jwt.issuer-uri=http://keycloak:8080/realms/rentACarMicroservices
#      - eureka.instance.prefer-ip-address=trued
#      - eureka.client.serviceUrl.defaultZone=http://discovery-service:8761/eureka
#      - SPRING_CLOUD_GATEWAY_ROUTES_2_URI=http://discovery-service:8761
#      - SPRING_CLOUD_GATEWAY_ROUTES_3_URI=http://discovery-service:8761

#    depends_on:
#      - discovery-service



  discovery-service:
    build: ./discovery-server
    ports:
      - 8761:8761
    mem_limit: 700m
    environment:
      - eureka.instance.prefer-ip-address= true
#    depends_on:
#      - keycloak

  rental-service:
    build: ./rental-service
    ports:
      - 7001:7001
    mem_limit: 700m
    environment:
#      - SPRING_PROFILES_ACTIVE=docker
      - eureka.instance.prefer-ip-address=true
      - eureka.client.serviceUrl.defaultZone=http://discovery-service:8761/eureka
      - spring.datasource.url=jdbc:postgresql://postgres:5432/car-rental-service1
      - spring.kafka.bootstrap-servers=kafka:9092

    depends_on:
      - postgres
      - discovery-service
      - api-gateway
      - notification-service

  notification-service:
    build: ./notification-service
    ports:
      - 8085:8085
    environment:
      - spring.kafka.bootstrap-servers=kafka:9092
#      - SPRING_PROFILES_ACTIVE=docker

  car-service:
    build: ./car-service
    ports:
      - 6001:6001
    mem_limit: 700m
    environment:
      - eureka.instance.prefer-ip-address=true
      - eureka.client.serviceUrl.defaultZone=http://discovery-service:8761/eureka
      - spring.data.mongodb.uri=mongodb://root:root@mongodb:27017/carService?authSource=admin
    depends_on:
      - mongodb
      - discovery-service
      - api-gateway
    #/images/1233px-Opel_Mokka-e_IMG_6111.jpg
    volumes:
      - C:/2023_Kodlama/javaTurkcell/turkcell.rent-a-car-microservices/images:/images

  customer-service:
    build: ./customer-service
    ports:
      - 8001:8001
    environment:
      - eureka.instance.prefer-ip-address=true
      - eureka.client.serviceUrl.defaultZone=http://discovery-service:8761/eureka
      - spring.datasource.url=jdbc:postgresql://postgres:5432/customer-rental-service1

networks:
  auth-network:
    driver: bridge